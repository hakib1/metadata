[
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column Column 1 using expression grel:if(lastIndexOf(value, \",\") == value.length()-1, substring(value, 0, value.length()-1), value)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Column 1",
    "expression": "grel:if(lastIndexOf(value, \",\") == value.length()-1, substring(value, 0, value.length()-1), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column Column 1 using expression grel:if(lastIndexOf(value, \".\") == value.length()-1, substring(value, 0, value.length()-1), value)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Column 1",
    "expression": "grel:if(lastIndexOf(value, \".\") == value.length()-1, substring(value, 0, value.length()-1), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column Cor at index 1 based on column Column 1 using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "newColumnName": "Cor",
    "columnInsertIndex": 1,
    "baseColumnName": "Column 1",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/recon",
    "description": "Reconcile cells in column Column 1 to type /people/person",
    "columnName": "Column 1",
    "config": {
      "mode": "standard-service",
      "service": "http://refine.codefork.com/reconcile/viaf",
      "identifierSpace": "http://rdf.freebase.com/ns/user/hangy/viaf",
      "schemaSpace": "http://rdf.freebase.com/ns/type.object.id",
      "type": {
        "id": "/people/person",
        "name": "Person"
      },
      "autoMatch": true,
      "columnDetails": [],
      "limit": 0
    },
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    }
  },
  {
    "op": "core/recon",
    "description": "Reconcile cells in column Cor to type /organization/organization",
    "columnName": "Cor",
    "config": {
      "mode": "standard-service",
      "service": "http://refine.codefork.com/reconcile/viaf",
      "identifierSpace": "http://rdf.freebase.com/ns/user/hangy/viaf",
      "schemaSpace": "http://rdf.freebase.com/ns/type.object.id",
      "type": {
        "id": "/organization/organization",
        "name": "/organization/organization"
      },
      "autoMatch": true,
      "columnDetails": [],
      "limit": 0
    },
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    }
  },
  {
    "op": "core/column-addition",
    "description": "Create column score at index 1 based on column Column 1 using expression grel:forEach(cell.recon.candidates, v, if((v.score >= 0.8), v.score, '')).join(\";\")",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "newColumnName": "score",
    "columnInsertIndex": 1,
    "baseColumnName": "Column 1",
    "expression": "grel:forEach(cell.recon.candidates, v, if((v.score >= 0.8), v.score, '')).join(\";\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column score using expression grel:if(isNonBlank(value), value + \";\", value)",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "score",
    "expression": "grel:if(isNonBlank(value), value + \";\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column score using expression grel:with(split(value, \";\"), v, if(v[1]==\"\", toNumber(v[0]), max(toNumber(v[0]), toNumber(v[1]))))",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "score",
    "expression": "grel:with(split(value, \";\"), v, if(v[1]==\"\", toNumber(v[0]), max(toNumber(v[0]), toNumber(v[1]))))",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column VIAFP at index 1 based on column Column 1 using expression grel:with(forEach(cell.recon.candidates, v, if(v.score == cells[\"score\"].value, v.id, \"\")).join(\";\"), a, a.split(\";\")[0])",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "newColumnName": "VIAFP",
    "columnInsertIndex": 1,
    "baseColumnName": "Column 1",
    "expression": "grel:with(forEach(cell.recon.candidates, v, if(v.score == cells[\"score\"].value, v.id, \"\")).join(\";\"), a, a.split(\";\")[0])",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column score-c at index 4 based on column Cor using expression grel:forEach(cell.recon.candidates, v, if((v.score >= 0.8), v.score, '')).join(\";\")",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "newColumnName": "score-c",
    "columnInsertIndex": 4,
    "baseColumnName": "Cor",
    "expression": "grel:forEach(cell.recon.candidates, v, if((v.score >= 0.8), v.score, '')).join(\";\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column score-c using expression grel:if(isNonBlank(value), value + \";\", value)",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "score-c",
    "expression": "grel:if(isNonBlank(value), value + \";\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column score-c using expression grel:with(split(value, \";\"), v, if(v[1]==\"\", toNumber(v[0]), max(toNumber(v[0]), toNumber(v[1]))))",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "score-c",
    "expression": "grel:with(split(value, \";\"), v, if(v[1]==\"\", toNumber(v[0]), max(toNumber(v[0]), toNumber(v[1]))))",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column VIAFC at index 4 based on column Cor using expression grel:with(forEach(cell.recon.candidates, v, if(v.score == cells[\"score-c\"].value, v.id, \"\")).join(\";\"), a, a.split(\";\")[0])",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "newColumnName": "VIAFC",
    "columnInsertIndex": 4,
    "baseColumnName": "Cor",
    "expression": "grel:with(forEach(cell.recon.candidates, v, if(v.score == cells[\"score-c\"].value, v.id, \"\")).join(\";\"), a, a.split(\";\")[0])",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column VIAF-ID at index 2 based on column VIAFP using expression grel:if(and(isBlank(cells[\"VIAFP\"].value), isNonBlank(cells[\"VIAFC\"].value)),cells[\"VIAFC\"].value,value)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "VIAF-ID",
    "columnInsertIndex": 2,
    "baseColumnName": "VIAFP",
    "expression": "grel:if(and(isBlank(cells[\"VIAFP\"].value), isNonBlank(cells[\"VIAFC\"].value)),cells[\"VIAFC\"].value,value)",
    "onError": "set-to-blank"
  }
]
